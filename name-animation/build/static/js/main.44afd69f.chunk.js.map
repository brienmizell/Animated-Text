{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","style","letterSpacing","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","downEls","Array","from","querySelectorAll","upEls","setInterval","i","length","classList","contains","remove","add"],"mappings":"8MAiCeA,cAzBH,WACV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,sBACVC,MAAO,CAAEC,cAAe,SAAUC,YAAa,SAFjD,SAMAN,EAAAC,EAAAC,cAAA,KACEC,UAAU,6BACVC,MAAO,CAAEC,cAAe,SAAUC,YAAa,SAFjD,UAOFN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAAb,UACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,cCfYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eCrHnB,IAAIC,EAAUC,MAAMC,KAAKV,SAASW,iBAAiB,gBAE/CC,EAAQH,MAAMC,KAAKV,SAASW,iBAAiB,cAEjDE,YAAY,WACV,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClCN,EAAQM,GAAGE,UAAUC,SAAS,UAC1BT,EAAQM,GAAGE,UAAUE,OAAO,UAC5BV,EAAQM,GAAGE,UAAUG,IAAI,UAE/B,IAASL,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCF,EAAME,GAAGE,UAAUC,SAAS,UACxBL,EAAME,GAAGE,UAAUE,OAAO,UAC1BN,EAAME,GAAGE,UAAUG,IAAI,WAE5B","file":"static/js/main.44afd69f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// const textStyling = {\n//   color: 'red',\n//   web-kit-stroke-color: 'red'\n// }\n\nconst App = () => {\n  return (\n    <div className=\"hint-text\">\n      <div className=\"text-line\">\n        <p\n          className=\"t-bottom scale-down\"\n          style={{ letterSpacing: \"0.11em\", paddingLeft: \"30px\" }}\n        >\n          BRIEN\n        </p>\n        <p\n          className=\"abs outline t-top scale-up\"\n          style={{ letterSpacing: \"0.11em\", paddingLeft: \"30px\" }}\n        >\n          BRIEN\n        </p>\n      </div>\n      <div className=\"text-line\">\n        <p className=\"outline scale-down t-top\">MIZELL</p>\n        <p className=\"abs scale-up t-bottom\">MIZELL</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nlet downEls = Array.from(document.querySelectorAll(\".scale-down\"));\n\nlet upEls = Array.from(document.querySelectorAll(\".scale-up\"));\n\nsetInterval(() => {\n  for (var i = 0; i < downEls.length; i++) {\n    downEls[i].classList.contains(\"active\")\n      ? downEls[i].classList.remove(\"active\")\n      : downEls[i].classList.add(\"active\");\n  }\n  for (var i = 0; i < upEls.length; i++) {\n    upEls[i].classList.contains(\"active\")\n      ? upEls[i].classList.remove(\"active\")\n      : upEls[i].classList.add(\"active\");\n  }\n}, 3000);\n"],"sourceRoot":""}